{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"machine_shape":"hm","authorship_tag":"ABX9TyNpB022x6F6yi1gWomyd8o+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["前置工作：同步goolge云端硬盘"],"metadata":{"id":"_TaJVWrOvKGA"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"TKTDzt2bJ7K6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["第一步：安装和导入必要包"],"metadata":{"id":"03y6l5Kwvapq"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"6mJDyXNtuO6S","collapsed":true},"outputs":[],"source":["! pip install datasets transformers"]},{"cell_type":"code","source":["from datasets import load_dataset, load_metric, ClassLabel, Sequence\n","import random\n","import pandas as pd\n","from IPython.display import display, HTML\n","from transformers import AutoTokenizer, AutoModelForQuestionAnswering, TrainingArguments, Trainer, default_data_collator, pipeline\n","import numpy as np\n","from tqdm.auto import tqdm\n","import torch\n","import collections"],"metadata":{"id":"U9DHU1ekvtTN","executionInfo":{"status":"ok","timestamp":1724565275192,"user_tz":-480,"elapsed":907,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}}},"execution_count":34,"outputs":[]},{"cell_type":"markdown","source":["第二步：原始数据加载"],"metadata":{"id":"cEiDQQf6ww0S"}},{"cell_type":"code","source":["# This flag is the difference between SQUAD v1 or 2 (if you're using another dataset, it indicates if impossible\n","# answers are allowed or not).\n","squad_v2 = False\n","model_checkpoint = \"distilbert-base-uncased\"\n","batch_size = 256"],"metadata":{"id":"YbXlt3WZwCc6","executionInfo":{"status":"ok","timestamp":1724561285369,"user_tz":-480,"elapsed":989,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["datasets = load_dataset(\"squad_v2\" if squad_v2 else \"squad\")"],"metadata":{"id":"NF14PhnqxHSL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["datasets"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"28J8DSJixMHM","executionInfo":{"status":"ok","timestamp":1724561344947,"user_tz":-480,"elapsed":728,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}},"outputId":"0ef680f6-dd50-40fe-ff11-c1f4c8d757f0"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DatasetDict({\n","    train: Dataset({\n","        features: ['id', 'title', 'context', 'question', 'answers'],\n","        num_rows: 87599\n","    })\n","    validation: Dataset({\n","        features: ['id', 'title', 'context', 'question', 'answers'],\n","        num_rows: 10570\n","    })\n","})"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["datasets[\"train\"][0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5J3DA9sixVDD","executionInfo":{"status":"ok","timestamp":1724561349269,"user_tz":-480,"elapsed":10,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}},"outputId":"c5c66e02-07ba-4e90-a7a7-73b6a6a35ca8"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'id': '5733be284776f41900661182',\n"," 'title': 'University_of_Notre_Dame',\n"," 'context': 'Architecturally, the school has a Catholic character. Atop the Main Building\\'s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend \"Venite Ad Me Omnes\". Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive (and in a direct line that connects through 3 statues and the Gold Dome), is a simple, modern stone statue of Mary.',\n"," 'question': 'To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France?',\n"," 'answers': {'text': ['Saint Bernadette Soubirous'], 'answer_start': [515]}}"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["第三步：数据处理"],"metadata":{"id":"kA0lMH4t2-rg"}},{"cell_type":"code","source":["# 加载tokenizer\n","tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)"],"metadata":{"id":"4BuMtBKqyyUG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["pad_on_right = tokenizer.padding_side == \"right\"\n","max_length = 384 # The maximum length of a feature (question and context)\n","doc_stride = 128 # The authorized overlap between two part of the context when splitting it is needed.\n","\n","def prepare_train_features(examples):\n","    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n","    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n","    # left whitespace\n","    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n","\n","    # Tokenize our examples with truncation and padding, but keep the overflows using a stride. This results\n","    # in one example possible giving several features when a context is long, each of those features having a\n","    # context that overlaps a bit the context of the previous feature.\n","    tokenized_examples = tokenizer(\n","        examples[\"question\" if pad_on_right else \"context\"],\n","        examples[\"context\" if pad_on_right else \"question\"],\n","        truncation=\"only_second\" if pad_on_right else \"only_first\",\n","        max_length=max_length,\n","        stride=doc_stride,\n","        return_overflowing_tokens=True,\n","        return_offsets_mapping=True,\n","        padding=\"max_length\",\n","    )\n","\n","    # Since one example might give us several features if it has a long context, we need a map from a feature to\n","    # its corresponding example. This key gives us just that.\n","    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n","    # The offset mappings will give us a map from token to character position in the original context. This will\n","    # help us compute the start_positions and end_positions.\n","    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n","\n","    # Let's label those examples!\n","    tokenized_examples[\"start_positions\"] = []\n","    tokenized_examples[\"end_positions\"] = []\n","\n","    for i, offsets in enumerate(offset_mapping):\n","        # We will label impossible answers with the index of the CLS token.\n","        input_ids = tokenized_examples[\"input_ids\"][i]\n","        cls_index = input_ids.index(tokenizer.cls_token_id)\n","\n","        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n","        sequence_ids = tokenized_examples.sequence_ids(i)\n","\n","        # One example can give several spans, this is the index of the example containing this span of text.\n","        sample_index = sample_mapping[i]\n","        answers = examples[\"answers\"][sample_index]\n","        # If no answers are given, set the cls_index as answer.\n","        if len(answers[\"answer_start\"]) == 0:\n","            tokenized_examples[\"start_positions\"].append(cls_index)\n","            tokenized_examples[\"end_positions\"].append(cls_index)\n","        else:\n","            # Start/end character index of the answer in the text.\n","            start_char = answers[\"answer_start\"][0]\n","            end_char = start_char + len(answers[\"text\"][0])\n","\n","            # Start token index of the current span in the text.\n","            token_start_index = 0\n","            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n","                token_start_index += 1\n","\n","            # End token index of the current span in the text.\n","            token_end_index = len(input_ids) - 1\n","            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n","                token_end_index -= 1\n","\n","            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n","            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n","                tokenized_examples[\"start_positions\"].append(cls_index)\n","                tokenized_examples[\"end_positions\"].append(cls_index)\n","            else:\n","                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n","                # Note: we could go after the last offset if the answer is the last word (edge case).\n","                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n","                    token_start_index += 1\n","                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n","                while offsets[token_end_index][1] >= end_char:\n","                    token_end_index -= 1\n","                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n","\n","    return tokenized_examples"],"metadata":{"id":"s8apP_2X5m-6","executionInfo":{"status":"ok","timestamp":1724561645724,"user_tz":-480,"elapsed":918,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["tokenized_datasets = datasets.map(prepare_train_features, batched=True, remove_columns=datasets[\"train\"].column_names)"],"metadata":{"id":"3tmrJ-od511w"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["第四步：构建模型"],"metadata":{"id":"7SnSOwHC4-ss"}},{"cell_type":"code","source":["model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)\n","\n","model_name = model_checkpoint.split(\"/\")[-1]\n","args = TrainingArguments(\n","    f\"{model_name}-finetuned-squad\",\n","    evaluation_strategy = \"epoch\",\n","    learning_rate=2e-5,\n","    per_device_train_batch_size=8,\n","    per_device_eval_batch_size=8,\n","    num_train_epochs=3,\n","    weight_decay=0.01,\n","    # push_to_hub=True,\n",")\n","\n","data_collator = default_data_collator\n","\n","trainer = Trainer(\n","    model,\n","    args,\n","    train_dataset=tokenized_datasets[\"train\"],\n","    eval_dataset=tokenized_datasets[\"validation\"],\n","    data_collator=data_collator,\n","    tokenizer=tokenizer,\n",")\n","\n","trainer.train()"],"metadata":{"id":"9BxLtrMC7Af5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 模型保存\n","trainer.save_model(\"test-squad-trained\")"],"metadata":{"id":"NmdmqfKVJLZ1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 重新加载模型 问答模型训练时间比较长 不重新训练的话 尽量从磁盘加载模型\n","model = AutoModelForQuestionAnswering.from_pretrained(\"/content/drive/MyDrive/bert/test-squad-trained\")\n","trainer = Trainer(\n","    model,\n","    args,\n","    train_dataset=tokenized_datasets[\"train\"],\n","    eval_dataset=tokenized_datasets[\"validation\"],\n","    data_collator=data_collator,\n","    tokenizer=tokenizer,\n",")"],"metadata":{"id":"150084uKPbJg","executionInfo":{"status":"ok","timestamp":1724562089112,"user_tz":-480,"elapsed":7494,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}}},"execution_count":25,"outputs":[]},{"cell_type":"markdown","source":["第五步：模型评估"],"metadata":{"id":"alnp33GO6sJJ"}},{"cell_type":"code","source":["def prepare_validation_features(examples):\n","    # Some of the questions have lots of whitespace on the left, which is not useful and will make the\n","    # truncation of the context fail (the tokenized question will take a lots of space). So we remove that\n","    # left whitespace\n","    examples[\"question\"] = [q.lstrip() for q in examples[\"question\"]]\n","\n","    # Tokenize our examples with truncation and maybe padding, but keep the overflows using a stride. This results\n","    # in one example possible giving several features when a context is long, each of those features having a\n","    # context that overlaps a bit the context of the previous feature.\n","    tokenized_examples = tokenizer(\n","        examples[\"question\" if pad_on_right else \"context\"],\n","        examples[\"context\" if pad_on_right else \"question\"],\n","        truncation=\"only_second\" if pad_on_right else \"only_first\",\n","        max_length=max_length,\n","        stride=doc_stride,\n","        return_overflowing_tokens=True,\n","        return_offsets_mapping=True,\n","        padding=\"max_length\",\n","    )\n","\n","    # Since one example might give us several features if it has a long context, we need a map from a feature to\n","    # its corresponding example. This key gives us just that.\n","    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n","\n","    # We keep the example_id that gave us this feature and we will store the offset mappings.\n","    tokenized_examples[\"example_id\"] = []\n","\n","    for i in range(len(tokenized_examples[\"input_ids\"])):\n","        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n","        sequence_ids = tokenized_examples.sequence_ids(i)\n","        context_index = 1 if pad_on_right else 0\n","\n","        # One example can give several spans, this is the index of the example containing this span of text.\n","        sample_index = sample_mapping[i]\n","        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n","\n","        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n","        # position is part of the context or not.\n","        tokenized_examples[\"offset_mapping\"][i] = [\n","            (o if sequence_ids[k] == context_index else None)\n","            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n","        ]\n","\n","    return tokenized_examples"],"metadata":{"id":"kQVYnD6E7K1x","executionInfo":{"status":"ok","timestamp":1724562345860,"user_tz":-480,"elapsed":2090,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["def postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 30):\n","    all_start_logits, all_end_logits = raw_predictions\n","    # Build a map example to its corresponding features.\n","    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n","    features_per_example = collections.defaultdict(list)\n","    for i, feature in enumerate(features):\n","        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n","\n","    # The dictionaries we have to fill.\n","    predictions = collections.OrderedDict()\n","\n","    # Logging.\n","    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n","\n","    # Let's loop over all the examples!\n","    for example_index, example in enumerate(tqdm(examples)):\n","        # Those are the indices of the features associated to the current example.\n","        feature_indices = features_per_example[example_index]\n","\n","        min_null_score = None # Only used if squad_v2 is True.\n","        valid_answers = []\n","\n","        context = example[\"context\"]\n","        # Looping through all the features associated to the current example.\n","        for feature_index in feature_indices:\n","            # We grab the predictions of the model for this feature.\n","            start_logits = all_start_logits[feature_index]\n","            end_logits = all_end_logits[feature_index]\n","            # This is what will allow us to map some the positions in our logits to span of texts in the original\n","            # context.\n","            offset_mapping = features[feature_index][\"offset_mapping\"]\n","\n","            # Update minimum null prediction.\n","            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n","            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n","            if min_null_score is None or min_null_score < feature_null_score:\n","                min_null_score = feature_null_score\n","\n","            # Go through all possibilities for the `n_best_size` greater start and end logits.\n","            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n","            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n","            for start_index in start_indexes:\n","                for end_index in end_indexes:\n","                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n","                    # to part of the input_ids that are not in the context.\n","                    if (\n","                        start_index >= len(offset_mapping)\n","                        or end_index >= len(offset_mapping)\n","                        or offset_mapping[start_index] is None\n","                        or offset_mapping[end_index] is None\n","                    ):\n","                        continue\n","                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n","                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n","                        continue\n","\n","                    start_char = offset_mapping[start_index][0]\n","                    end_char = offset_mapping[end_index][1]\n","                    valid_answers.append(\n","                        {\n","                            \"score\": start_logits[start_index] + end_logits[end_index],\n","                            \"text\": context[start_char: end_char]\n","                        }\n","                    )\n","\n","        if len(valid_answers) > 0:\n","            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n","        else:\n","            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n","            # failure.\n","            best_answer = {\"text\": \"\", \"score\": 0.0}\n","\n","        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n","        if not squad_v2:\n","            predictions[example[\"id\"]] = best_answer[\"text\"]\n","        else:\n","            answer = best_answer[\"text\"] if best_answer[\"score\"] > min_null_score else \"\"\n","            predictions[example[\"id\"]] = answer\n","\n","    return predictions"],"metadata":{"id":"hSmvHba7b2sJ","executionInfo":{"status":"ok","timestamp":1724562357720,"user_tz":-480,"elapsed":2387,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["validation_features = datasets[\"validation\"].map(\n","    prepare_validation_features,\n","    batched=True,\n","    remove_columns=datasets[\"validation\"].column_names\n",")\n","\n","raw_predictions = trainer.predict(validation_features)\n","\n","final_predictions = postprocess_qa_predictions(datasets[\"validation\"], validation_features, raw_predictions.predictions)\n","\n","metric = load_metric(\"squad_v2\" if squad_v2 else \"squad\")\n","\n","if squad_v2:\n","    formatted_predictions = [{\"id\": k, \"prediction_text\": v, \"no_answer_probability\": 0.0} for k, v in final_predictions.items()]\n","else:\n","    formatted_predictions = [{\"id\": k, \"prediction_text\": v} for k, v in final_predictions.items()]\n","references = [{\"id\": ex[\"id\"], \"answers\": ex[\"answers\"]} for ex in datasets[\"validation\"]]\n","metric.compute(predictions=formatted_predictions, references=references)"],"metadata":{"id":"pK6-w-y_7BG-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["第六步：模型推理"],"metadata":{"id":"mZuBKbCxHEdD"}},{"cell_type":"code","source":["# 加载预训练的模型\n","qa_pipeline = pipeline(\"question-answering\", model=\"/content/drive/MyDrive/bert/test-squad-trained\", tokenizer=\"/content/drive/MyDrive/bert/test-squad-trained\")\n","\n","# 输入问题和上下文\n","question = \"Why did John divert south?\"\n","context = \"Baronial unrest in England prevented the departure of the planned 1205 expedition, and only a smaller force under William Longespée deployed to Poitou. In 1206 John departed for Poitou himself, but was forced to divert south to counter a threat to Gascony from Alfonso VIII of Castile. After a successful campaign against Alfonso, John headed north again, taking the city of Angers. Philip moved south to meet John; the year's campaigning ended in stalemate and a two-year truce was made between the two rulers.\"\n","answer = \"{'text': ['to counter a threat to Gascony from Alfonso VIII of Castile'], 'answer_start': [225]}\"\n","# 进行推理\n","result = qa_pipeline(question=question, context=context)\n","print(result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"koSv5xBwjwYs","executionInfo":{"status":"ok","timestamp":1724565493962,"user_tz":-480,"elapsed":815,"user":{"displayName":"fengguoying85@163.com","userId":"03322301898888393442"}},"outputId":"2dd61346-2785-45c5-ee27-6a334442a0fd"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["{'score': 0.1466113179922104, 'start': 228, 'end': 255, 'answer': 'counter a threat to Gascony'}\n"]}]}]}